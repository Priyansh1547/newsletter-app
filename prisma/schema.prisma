// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  name          String
  emailVerified Boolean
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Newsletters   Newsletter[]
  Sessions      Session[]
  Accounts      Account[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  expiresAt             DateTime?
  password              String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

model Newsletter {
  id             String           @id @default(uuid())
  name           String
  slug           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  emails         Email[]          @relation("NewsletterEmails")
  subscribers    Subscriber[]
  newsletterPage NewsletterPage[]
}

model NewsletterPage {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  themeColor   String
  ctaText      String
  newsletterId String
  slug         String
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id])
}

model Email {
  id           String     @id @default(uuid())
  subject      String
  content      String
  sentAt       DateTime   @default(now())
  newsletterId String
  newsletter   Newsletter @relation("NewsletterEmails", fields: [newsletterId], references: [id])
}

model Subscriber {
  id           String     @id @default(uuid())
  email        String
  isVerified   Boolean    @default(false)
  newsletterId String
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id])
}
